<?xml version="1.0" encoding="UTF-8"?><apiPackage id="flare.basic"><apiName>flare.basic</apiName><apiDetail/><apiClassifier id="flare.basic:Viewer3D"><apiName>Viewer3D</apiName><shortdesc>
	 The Viewer3D class adds basic functionalities to the scene for camera control and easier 3d object viewing.</shortdesc><prolog><author>Ariel Nehmad
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flare.basic:Scene3D</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The Viewer3D class adds basic functionalities to the scene for camera control and easier 3d object viewing.                                         
	 </apiDesc></apiClassifierDetail><apiConstructor id="flare.basic:Viewer3D:Viewer3D"><apiName>Viewer3D</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:DisplayObjectContainer"/></apiParam><apiParam><apiItemName>file</apiItemName><apiType value="String"/><apiData/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flare.basic:Scene3D"><apiName>Scene3D</apiName><shortdesc>	
	 The Scene3D class is the main element, container and manager of all the 3d resources and objects.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flare.core:Pivot3D</apiBaseClassifier></apiClassifierDef><apiDesc>	
	 The Scene3D class is the main element, container and manager of all the 3d resources and objects.
	 
	 <p>The Scene3D class also has a Clock3D instance that manages update and render cycles. The update event indicates the need to update scene elements and the render and
	 postRender events allow full control before and after the render process.</p>
	 
	 <p>Once the scene has been created, use addChild or addChildFromFile to include 3d objects. This will dispatch the progress 
	 and complete events to control the loading process for external files.</p>
	 
	 <p>The scene also creates a Camera3D object to view the scene.
	 The canvas size will take Stage size values by default. To change the rendering area size, use the setViewport method.</p>	  
	 
	 </apiDesc><example>
	 This example shows the basic creation process of a scene:
	 This example shows how to load external 3d objects into the scene.     
	 <codeblock rev="3.0">
import flare.basic.~~
   
// creates the scene.
var scene:Scene3D = new Scene3D( this )

// adds the events to manage the object loading process.  
scene.addEventListener( Scene3D.PROGRESS_EVENT, progressEvent )
scene.addEventListener( Scene3D.COMPLETE_EVENT, completeEvent )

// loads 3d models from external files.
scene.addChildFromFile( "myModel1.f3d" )
scene.addChildFromFile( "myModel2.f3d" )
scene.addChildFromFile( "myModel3.f3d" )

function progressEvent( e:Event ):void
{
    // shows loading progress (0-100).
    trace( scene.loadProgress )
}

function completeEvent( e:Event ):void
{
    // once the scene loading process has been completed, elements can be accessed and the scene can be updated.
    scene.addEventListener( Scene3D.UPDATE_EVENT, updateEvent )
}

function updateEvent( e:Event ):void
{
    // update scene here.
}
	 </codeblock>
	 
	 </example></apiClassifierDetail><related-links><link href="../core/Pivot3D.html#addChild()"><linktext>addChild()</linktext></link><link href="Scene3D.html#addChildFromFile()"><linktext>addChildFromFile()</linktext></link><link href="flare.core.xml#Camera3D"><linktext>flare.core.Camera3D</linktext></link></related-links><adobeApiEvent id="flare.basic:Scene3D_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
	 Dispatched if a call to load() results in a fatal error that terminates the download.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Dispatched if a call to load() results in a fatal error that terminates the download.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flare.basic:Scene3D_flash.events.Event_progress"><apiName>progress</apiName><shortdesc>
	 This event occurs whenever the loading progress of the elements of a scene is modified.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 This event occurs whenever the loading progress of the elements of a scene is modified.                 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flare.basic:Scene3D_flash.events.Event_complete"><apiName>complete</apiName><shortdesc>
	 This event occurs once the loading process of all the scene elements has been completed.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 This event occurs once the loading process of all the scene elements has been completed.               
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flare.basic:Scene3D_flash.events.Event_postRender"><apiName>postRender</apiName><shortdesc>
	 This event occurs after rendering the scene.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 This event occurs after rendering the scene.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flare.basic:Scene3D_flash.events.Event_render"><apiName>render</apiName><shortdesc>
	 This event occurs before rendering the scene.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 This event occurs before rendering the scene.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flare.basic:Scene3D_flash.events.Event_update"><apiName>update</apiName><shortdesc>
	 This event occurs whenever the program must be updated.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 This event occurs whenever the program must be updated. This event is synchronized with the frames-per-second rate defined in Device3D and bit rate is constant.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flare.basic:Scene3D:Scene3D"><apiName>Scene3D</apiName><shortdesc>
		 Create a new Scene3D object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Object that will serve as container to render the scene. Preferably, it should be an empty MovieClip or Sprite. It must not be rotated or scaled.   
		 </apiDesc></apiParam><apiParam><apiItemName>file</apiItemName><apiType value="String"/><apiData/><apiDesc>Optional name of the ~~.f3d file to be loaded into the scene. The file parameter is optional. If null, an empty scene is created. More ~~.f3d files can be subsequently added using the addChild or addChildFromFile method.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create a new Scene3D object.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flare.basic:Scene3D:addChildFromFile"><apiName>addChildFromFile</apiName><shortdesc>
		 Loads and adds a Flare3D (~~.f3d) file from an external file.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The Flare3DLoader object that loads the file. The loaded elements will become available only after the “complete” event of the scene.
		 </apiDesc><apiOperationClassifier>flare.core:Pivot3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>request</apiItemName><apiType value="any"/><apiDesc>File path.
		 </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>flare.core:Pivot3D</apiOperationClassifier><apiData>null</apiData><apiDesc>pivot that will serve as container for the objects in the file. 
		 If ‘parent’ is null, a container with the name of the file to be added to the scene is created.
		 </apiDesc></apiParam><apiParam><apiItemName>loaderClass</apiItemName><apiType value="Class"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Loads and adds a Flare3D (~~.f3d) file from an external file.  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flare.basic:Scene3D:addTextureFromFile"><apiName>addTextureFromFile</apiName><shortdesc>
		 Loads a texture from an external file.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The loaded texture. The texture will become available after the “complete” event of the scene. 
		 </apiDesc><apiOperationClassifier>flare.core:Texture3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>request</apiItemName><apiType value="any"/><apiDesc>File path.       
		 </apiDesc></apiParam><apiParam><apiItemName>optimizeForRenderToTexture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiData>rgba</apiData></apiParam></apiOperationDef><apiDesc>
		 Loads a texture from an external file.       
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flare.basic:Scene3D:getPointScreenCoords"><apiName>getPointScreenCoords</apiName><shortdesc>
		 Returns the coordinates of an arbitrary point respect to the screen.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The vector with the coordinates. 
		 </apiDesc><apiType value="flash.geom:Vector3D"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>If a vector is specified, this vector will be filled with the returned values.
		 </apiDesc></apiParam><apiParam><apiItemName>out</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Returns the coordinates of an arbitrary point respect to the screen. 
		 The returned values are relative to the viewPort size that is currently used.      
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flare.basic:Scene3D:pause"><apiName>pause</apiName><shortdesc>
		 Pauses the “update” event and starts shooting the “paused” event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Pauses the “update” event and starts shooting the “paused” event.
		 </apiDesc></apiOperationDetail><related-links><link href="flare.basic.xml#Scene3D/resume()"><linktext>resume()</linktext></link></related-links></apiOperation><apiOperation id="flare.basic:Scene3D:registerClass"><apiName>registerClass</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flare.basic:Scene3D:render"><apiName>render</apiName><shortdesc>
		 Renders the current scene frame.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>camera</apiItemName><apiOperationClassifier>flare.core:Camera3D</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>clearDepth</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Renders the current scene frame. This method is called by the scene automatically but can force the rendering if necessary or if the scene is paused.
		 This method also will dispatch the scene 'render' event but not the 'postRender' event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flare.basic:Scene3D:resume"><apiName>resume</apiName><shortdesc>
		 Exits pause mode.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Exits pause mode.
		 </apiDesc></apiOperationDetail><related-links><link href="flare.basic.xml#Scene3D/pause()"><linktext>pause()</linktext></link></related-links></apiOperation><apiOperation id="flare.basic:Scene3D:setLayerSortMode"><apiName>setLayerSortMode</apiName><shortdesc>
		 Specifies a layer to be sorted per object on each frame.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>layer</apiItemName><apiType value="int"/><apiDesc>Index of the layer to be sorted.
		 </apiDesc></apiParam><apiParam><apiItemName>mode</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>The sort mode should be one of the constants SORT_FRONT_TO_BACK, SORT_BACK_TO_FRONT or SORT_NONE.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Specifies a layer to be sorted per object on each frame. This is very useful to draw correctly alpha objects that needs to be sorted.
		 This property is property is used in conjunction with Pivot3D sortMode property.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flare.basic:Scene3D:setViewport"><apiName>setViewport</apiName><shortdesc>
		 Sets the dimensions of the canvas rendering area.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>left maring of rendering area in pixels.
		 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Top maring of rendering area in pixels.
		 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiData>640</apiData><apiDesc>Width of rendering area in pixels.
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiData>480</apiData><apiDesc>Height of rendering area in pixels.
		 </apiDesc></apiParam><apiParam><apiItemName>antialias</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>an int selecting anti-aliasing quality. 0 is no anti-aliasing. Correlates to the number of sub-samples; a value of 2 is generally the minimum, although some systems with anti-alias with a value of one. More anti-aliasing is more depanding on the GPU and may impact performance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the dimensions of the canvas rendering area. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flare.basic:Scene3D:setupFrame"><apiName>setupFrame</apiName><shortdesc>
		 This method prepares the scene to be rendered.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>camera</apiItemName><apiOperationClassifier>flare.core:Camera3D</apiOperationClassifier><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method prepares the scene to be rendered. 
		 The render method call to this before render. You should only use this function if you want to
		 draw manually specific objects.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flare.basic:Scene3D:updateLights"><apiName>updateLights</apiName><shortdesc>
		 Force to update the light fitler.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Force to update the light fitler.
		 This method is called automatically by the scene when the enableLights property is seted to true.
		 </apiDesc></apiOperationDetail><related-links><link href="flare.basic.xml#Scene3D/enableLights"><linktext>enableLights</linktext></link></related-links></apiOperation><apiOperation id="flare.basic:Scene3D:updateMouseEvents"><apiName>updateMouseEvents</apiName><shortdesc>
		 This method forces to update mouse events for all 3D objects in the scene.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This method forces to update mouse events for all 3D objects in the scene.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flare.basic:Scene3D:update"><apiName>update</apiName><shortdesc>
		 Forces to update the scene and animations and will dispatch the scene 'update' event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Forces to update the scene and animations and will dispatch the scene 'update' event.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flare.basic:Scene3D:COMPLETE_EVENT"><apiName>COMPLETE_EVENT</apiName><shortdesc> Defines the value for the “complete” event.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiType value="String"/></apiValueDef><apiDesc> Defines the value for the “complete” event. </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:PAUSED_EVENT"><apiName>PAUSED_EVENT</apiName><shortdesc> Defines the value for the “paused” event.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>paused</apiData><apiType value="String"/></apiValueDef><apiDesc> Defines the value for the “paused” event. </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:POSTRENDER_EVENT"><apiName>POSTRENDER_EVENT</apiName><shortdesc> Defines the value for the “postRender” event.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>postRender</apiData><apiType value="String"/></apiValueDef><apiDesc> Defines the value for the “postRender” event. </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:PROGRESS_EVENT"><apiName>PROGRESS_EVENT</apiName><shortdesc> Defines the value for the “progress” event.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiType value="String"/></apiValueDef><apiDesc> Defines the value for the “progress” event. </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:RENDER_EVENT"><apiName>RENDER_EVENT</apiName><shortdesc> Defines the value for the “render” event.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>render</apiData><apiType value="String"/></apiValueDef><apiDesc> Defines the value for the “render” event. </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:SORT_BACK_TO_FRONT"><apiName>SORT_BACK_TO_FRONT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:SORT_FRONT_TO_BACK"><apiName>SORT_FRONT_TO_BACK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:SORT_NONE"><apiName>SORT_NONE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:UPDATE_EVENT"><apiName>UPDATE_EVENT</apiName><shortdesc> Defines the value for the update” event.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiType value="String"/></apiValueDef><apiDesc> Defines the value for the update” event. </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:clearColor"><apiName>clearColor</apiName><shortdesc>
		 Color to use to clear the back buffer.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="flash.geom:Vector3D"/></apiValueDef><apiDesc>
		 Color to use to clear the back buffer.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:defaultLight"><apiName>defaultLight</apiName><shortdesc>
		 Sets and returns the default light.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flare.core:Light3D</apiValueClassifier></apiValueDef><apiDesc>
		 Sets and returns the default light.
		 This light will always be at the same position and orientation as the
		 current camera. You can set to any light type and properties.
		 If you do not want to use the default light, set it to null.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:enableLights"><apiName>enableLights</apiName><shortdesc>
		 Allow the scene to automatically update the light filter.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Allow the scene to automatically update the light filter.
		 If you don't want that the scene updates the lights automatically, set it to false and 
		 you will need to call to updateLights method to update manually.
		 </apiDesc></apiValueDetail><related-links><link href="flare.basic.xml#Scene3D/updateLights()"><linktext>updateLights()</linktext></link></related-links></apiValue><apiValue id="flare.basic:Scene3D:ignoreInvisibleUnderMouse"><apiName>ignoreInvisibleUnderMouse</apiName><shortdesc>
		 Allow to detect mouse events with non visible objects such as references or simplified geometry.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Allow to detect mouse events with non visible objects such as references or simplified geometry.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:library"><apiName>library</apiName><shortdesc>
		 Library3D instance that manages all scene resources.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flare.system:Library3D</apiValueClassifier></apiValueDef><apiDesc>
		 Library3D instance that manages all scene resources.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:lights"><apiName>lights</apiName><shortdesc>
		 A reference to a LightFilter that manage all scene lights.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flare.materials.filters:LightFilter"/></apiValueDef><apiDesc>
		 A reference to a LightFilter that manage all scene lights.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:antialias:get"><apiName>antialias</apiName><shortdesc>
		 An int selecting anti-aliasing quality.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
		 An int selecting anti-aliasing quality. 0 is no anti-aliasing. Correlates to the number of sub-samples; a value of 2 is generally the minimum, although some systems with anti-alias with a value of one. More anti-aliasing is more depanding on the GPU and may impact performance.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:autoResize:set"><apiName>autoResize</apiName><shortdesc>
		 This property forces to the scene to take the stage dimensions when the stage is resized if is setted to true.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 This property forces to the scene to take the stage dimensions when the stage is resized if is setted to true.
		 Also changes the stage.align to topLeft and sets the stage.scaleMode to noScale.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:camera:get"><apiName>camera</apiName><shortdesc>
		 Sets or returns the camera to be used for rendering.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flare.core:Camera3D</apiValueClassifier></apiValueDef><apiDesc>
		 Sets or returns the camera to be used for rendering.
		 </apiDesc></apiValueDetail><related-links><link href="flare.core.xml#Camera3D"><linktext>flare.core.Camera3D</linktext></link></related-links></apiValue><apiValue id="flare.basic:Scene3D:context:get"><apiName>context</apiName><shortdesc>
		 Returns the context used for rendering.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display3D:Context3D"/></apiValueDef><apiDesc>
		 Returns the context used for rendering.  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:enableUpdateAndRender:get"><apiName>enableUpdateAndRender</apiName><shortdesc> 
		 Enables or disable the automatic update, render and postRender events of the scene.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Enables or disable the automatic update, render and postRender events of the scene.
		 Seting this property to false will allow you to manage your own update and render loop, calling to those methods manually.
		 </apiDesc></apiValueDetail><related-links><link href="flare.basic.xml#Scene3D/update()"><linktext>update()</linktext></link><link href="flare.basic.xml#Scene3D/render()"><linktext>render()</linktext></link></related-links></apiValue><apiValue id="flare.basic:Scene3D:frameRate:get"><apiName>frameRate</apiName><shortdesc>
		 Gets and sets the frame rate of the 3d scene only for the "update" event.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Gets and sets the frame rate of the 3d scene only for the "update" event. The frame rate is defined as frames per second.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:loadProgress:get"><apiName>loadProgress</apiName><shortdesc>
		 Gets the global loading process of the scene.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Gets the global loading process of the scene.
		 The returned value is a percent value between 0 and 100.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:mouseEnabled:set"><apiName>mouseEnabled</apiName><shortdesc>
		 Enables or disable all mouse scene events.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Enables or disable all mouse scene events.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:paused:get"><apiName>paused</apiName><shortdesc>
		 Returns 'true' if the scene is paused.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Returns 'true' if the scene is paused.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:renderList:get"><apiName>renderList</apiName><shortdesc>
		 Gets access to the render list.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$flare.core:Pivot3D"/></apiValueDef><apiDesc>
		 Gets access to the render list.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:renderTime:get"><apiName>renderTime</apiName><shortdesc>
		 Returns time taken to render the scene, including lights, object occlusion, drawing, etc.., in milliseconds.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Returns time taken to render the scene, including lights, object occlusion, drawing, etc.., in milliseconds.
		 The returned time, does not include the present call.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:rendersPerSecond:get"><apiName>rendersPerSecond</apiName><shortdesc>
		 Returns the rendering frame rate for statistical purposes.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Returns the rendering frame rate for statistical purposes.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:stageIndex:get"><apiName>stageIndex</apiName><shortdesc>
		 Gets the associated Stage3D index.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Gets the associated Stage3D index.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:updateList:get"><apiName>updateList</apiName><shortdesc>
		 Gets access to the update list.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$flare.core:Pivot3D"/></apiValueDef><apiDesc>
		 Gets access to the update list.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:updateTime:get"><apiName>updateTime</apiName><shortdesc>
		 Returns the time taken to update the scene in milliseconds.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Returns the time taken to update the scene in milliseconds.   
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:updatesPerSecond:get"><apiName>updatesPerSecond</apiName><shortdesc>
		 Returns the update frame rate for statistical purposes.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Returns the update frame rate for statistical purposes.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:viewPort:get"><apiName>viewPort</apiName><shortdesc>
		 Gets the viewport area associated to the Stage3D.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
		 Gets the viewport area associated to the Stage3D.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:showLogo:set"><apiName>showLogo</apiName><shortdesc>
		 Shows or hides the Flare3D watermak logo for debugging purposes.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Shows or hides the Flare3D watermak logo for debugging purposes.
		 This property only works on comercial versions of Flare3D or if the content is running using a Flash Player Debugger version.
		 If the library is a trial version and the content is runnung under a Flash Player release version, this property will not take any effect.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flare.basic:Scene3D:showMenu:set"><apiName>showMenu</apiName><shortdesc>
		 Shows or hides the Flare3D version on the right click menu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Shows or hides the Flare3D version on the right click menu.
		 This property should be setted inmediaelly after the scene creation.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>